use crate::sudoku::Sudoku;
use std::fs;
use std::time::Instant;
use std::collections::HashMap;

mod sudoku;
mod backtracking;

fn main() {
    let boards: HashMap<&str, &str> = HashMap::from([
        ("easy1", "004080300000003042800405907302070508050000070608090201406207009520900000007010400"),
        ("easy2", "010706059600309201000020700100000807060508040203000005001050000507604008830207010"),
        ("easy3", "100904037007501204000030050700000065001206800390000002070020000609305700250108006"),
        ("medium1", "000097006500200104300001070093805007000010000400706590040100009802009001900640000"),
        ("medium2", "000850020000007608840000700000020463400000009612030000006000042305700000020089000"),
        ("medium3", "350400108800007000004001000048705001010080030900604850000100300000200009702003016"),
        ("hard1", "080094000009170000401000003008000020500913008090000400300000806000058200000230040"),
        ("hard2", "000089200000030007008000305005070094000204000430060800801000400600020000002150000"),
        ("hard3", "000900003001080700000003890300010080540020061020050009052800000003060100800005000"),
        ("evil1", "005280000000004100009000403900700060080010040050009001406000200007400000000025600"),
        ("evil2", "400065007170000090000004080002030009000401000600090300090100000010000038200580001"),
        ("evil3", "902000008000085009400200000050006300010030020006400090000002003500810000600000702"),
        ("inkala", "800000000003600000070090200050007000000045700000100030001000068008500010090000400"),
        ("challenge1", "000700000100000000000430200000000006000509000000000418000081000002000050040000300"),
        ("challenge2", "000000012008030000000000040120500000000004700060000000507000300000620000000100000"),
        ("challenge3", "630500000000408900000000100400700060210000000000000000000012000008000050000090000"),
        ("challenge4", "000000071600500000200000000340010000000070620000000500000600300080400000010000000"),
    ]);

    let mut sudoku: Sudoku = Sudoku::from_string(boards.get("inkala").unwrap());

    sudoku.draw();
    println!("{}", sudoku.is_solved());

    let start: Instant = Instant::now();
    sudoku.solve();
    println!("Time elapsed to solve sudoku: {:?}", start.elapsed());

    sudoku.draw();

    println!("{}", sudoku.is_solved());

    // Solve challenge boards
    println!("Loading challenge Sudoku boards");
    let boards: String = fs::read_to_string("all_17_clue_sudokus.txt").expect("Should have been able to read the file!");
    let boards: Vec<&str> = boards.split("\n").collect();
    println!("Start solving Sudokus");
    let start: Instant = Instant::now();
    let mut sudoku: Sudoku;
    for board in boards {
        sudoku = Sudoku::from_string(board);
        sudoku.solve();
    }
    println!("Time elapsed to solve all boards: {:?}", start.elapsed());
}
